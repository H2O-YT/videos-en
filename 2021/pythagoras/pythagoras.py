from manim import *

class Pythagoras(Scene):
    def construct(self):
        tex = Tex("On every right triangle, the square of the length\\\\of the hypotenuse equals the sum of the squares of the\\\\lengths of the other two sides.")
        self.play(Write(tex))
        self.wait(2)
        self.play(tex.animate.to_edge(UP))
        self.wait()
        tri = Polygon([-1.5, -1.0, 0.0], [1.5, -1.0, 0.0], [1.5, 1.0, 0.0]).set_fill(color=GREEN, opacity=1.0)
        self.play(DrawBorderThenFill(tri))
        self.wait()
        side1 = MathTex("a", color=YELLOW).next_to(tri.get_bottom(), DOWN)
        side2 = MathTex("b", color=YELLOW).next_to(tri.get_right(), RIGHT)
        hyp = MathTex("c", color=YELLOW).next_to(Line(tri.get_vertices()[2], tri.get_vertices()[0]), UP, buff=-0.4)
        group = VGroup(side1, side2, hyp)
        self.play(Write(group))
        self.wait()
        theorem = MathTex("a^2", "+", "b^2", "=", "c^2", substrings_to_isolate=["a", "b", "c"]).set_color_by_tex("a", YELLOW).set_color_by_tex("b", YELLOW).set_color_by_tex("c", YELLOW).to_edge(DOWN)
        for i in theorem:
            for j in i:
                if j == SingleStringMathTex("^"):
                    pass
                else:
                    self.add(j)
                    self.wait(0.25)
        self.wait(0.75)

class Proof1(Scene):
    def construct(self):
        tex = Title("Proof 1").to_edge(UP)
        self.play(Write(tex))
        self.wait()
        tri1 = Polygon([-1.5, 1.0, 0.0], [-1.5, -1.0, 0.0], [1.5, -1.0, 0.0]).set_fill(color=BLUE_E, opacity=1.0)
        tri2 = Polygon([1.5, -1.0, 0.0], [3.5, -1.0, 0.0], [3.5, 2.0, 0.0]).set_fill(color=BLUE_E, opacity=1.0)
        tri3 = Polygon([3.5, 2.0, 0.0], [3.5, 4.0, 0.0], [0.5, 4.0, 0.0]).set_fill(color=BLUE_E, opacity=1.0)
        tri4 = Polygon([0.5, 4.0, 0.0], [-1.5, 4.0, 0.0], [-1.5, 1.0, 0.0]).set_fill(color=BLUE_E, opacity=1.0)
        sq = Polygon([-1.5, 1.0, 0.0], [1.5, -1.0, 0.0], [3.5, 2.0, 0.0], [0.5, 4.0, 0.0], color=GREEN).set_fill(color=GREEN_E, opacity=1.0)
        group = VGroup(tri1, tri2, tri3, tri4, sq).scale(0.75)
        tex1 = MathTex("a", color=YELLOW).next_to(tri1.get_bottom(), DOWN)
        tex2 = MathTex("b", color=YELLOW).next_to(tri1.get_left(), LEFT)
        tex3 = MathTex("c", color=YELLOW).next_to(Line(tri1.get_vertices()[0], tri1.get_vertices()[2]), UP, buff=-0.5)
        texg = VGroup(tex1, tex2, tex3)
        tex4 = MathTex("a", color=YELLOW).next_to(tri2.get_right(), RIGHT)
        tex5 = MathTex("b", color=YELLOW).next_to(tri2.get_bottom(), DOWN)
        tex6 = MathTex("c", color=YELLOW).next_to(Line(tri2.get_vertices()[0], tri2.get_vertices()[2]), LEFT, buff=-0.5)
        texg2 = VGroup(tex4, tex5, tex6)
        tex7 = MathTex("a", color=YELLOW).next_to(tri3.get_top(), UP)
        tex8 = MathTex("b", color=YELLOW).next_to(tri3.get_right(), RIGHT)
        tex9 = MathTex("c", color=YELLOW).next_to(Line(tri3.get_vertices()[0], tri3.get_vertices()[2]), DOWN, buff=-0.5)
        texg3 = VGroup(tex7, tex8, tex9)
        tex10 = MathTex("a", color=YELLOW).next_to(tri4.get_left(), LEFT)
        tex11 = MathTex("b", color=YELLOW).next_to(tri4.get_top(), UP)
        tex12 = MathTex("c", color=YELLOW).next_to(Line(tri4.get_vertices()[0], tri4.get_vertices()[2]), RIGHT, buff=-0.5)
        texg4 = VGroup(tex10, tex11, tex12)
        group_full = VGroup(group, texg, texg2, texg3, texg4).next_to(tex, DOWN)
        self.play(DrawBorderThenFill(tri1))
        self.play(Write(texg))
        self.wait()
        tri1c = tri1.copy()
        self.play(Rotate(tri1c, PI/2, about_point=tri1c.get_vertices()[2]))
        self.play(TransformMatchingShapes(tri1c, tri2))
        tri2c = tri2.copy()
        self.play(Rotate(tri2c, PI/2, about_point=tri2c.get_vertices()[2]))
        self.play(TransformMatchingShapes(tri2c, tri3))
        tri3c = tri3.copy()
        self.play(Rotate(tri3c, PI/2, about_point=tri3c.get_vertices()[2]))
        self.play(TransformMatchingShapes(tri3c, tri4))
        self.wait()
        self.play(Write(texg2))
        self.wait()
        self.play(Write(texg3))
        self.wait()
        self.play(Write(texg4))
        self.wait()
        self.bring_to_back(sq)
        self.play(FadeIn(sq))
        self.wait()
        expression = MathTex("A_{\\mathrm{sq}}=A_{\\mathrm{sq}}").next_to(group_full, DOWN)
        self.play(Write(expression))
        self.wait()
        self.play(Indicate(tex1, color=WHITE))
        self.play(Indicate(tex5, color=WHITE))
        self.wait()
        expression2 = MathTex("(", "a\\relax", "+", "b\\relax", ")^2", "=", "c\\relax", "^2+4A_{\\mathrm{tri}}").set_color_by_tex("a\\relax", YELLOW).set_color_by_tex("b\\relax", YELLOW).set_color_by_tex("c\\relax", YELLOW).next_to(expression, DOWN)
        group1 = VGroup()
        for i in range(5):
            group1.add(expression2[i])
        self.play(Write(group1))
        self.wait()
        group2 = VGroup()
        for i in range(5, 8):
            group2.add(expression2[i])
        self.play(Write(group2))
        self.wait()
        self.play(FadeOut(expression), expression2.animate.next_to(group_full, DOWN))
        self.wait()
        self.play(Indicate(tex1, color=WHITE))
        self.play(Indicate(tex2, color=WHITE))
        self.wait()
        expression3 = MathTex("(", "a\\relax", "+", "b\\relax", ")^2=", "c\\relax", "^2+4", "{a\\relax", "b\\relax", "\\over 2}").set_color_by_tex("a\\relax", YELLOW).set_color_by_tex("b\\relax", YELLOW).set_color_by_tex("c\\relax", YELLOW).next_to(expression2, DOWN)
        self.play(Write(expression3))
        self.wait()
        self.play(FadeOut(expression2), expression3.animate.next_to(group_full, DOWN))
        self.wait()
        expression4 = MathTex("a\\relax", "^2", "+", "2", "a\\relax", "b\\relax", "+", "b\\relax", "^2", "=", "c\\relax", "^2", "+", "2", "a\\relax", "b\\relax").set_color_by_tex("a\\relax", YELLOW).set_color_by_tex("b\\relax", YELLOW).set_color_by_tex("c\\relax", YELLOW).next_to(expression3, DOWN)
        for i in range(9):
            self.add(expression4[i])
            self.wait(0.25)
        self.wait(0.75)
        for i in range(9, len(expression4)):
            self.add(expression4[i])
            self.wait(0.25)
        self.wait(0.75)
        self.play(FadeOut(expression3), expression4.animate.next_to(group_full, DOWN))
        self.wait()
        g = VGroup()
        for i in range(2, 6):
            g.add(expression4[i])
        cr1 = Cross(g, color=RED)[0]
        g2 = VGroup()
        for i in range(12, 16):
            g2.add(expression4[i])
        cr2 = Cross(g2, color=RED)[0]
        self.play(Create(cr1), Create(cr2))
        self.wait()
        expression5 = MathTex("a\\relax", "^2", "+", "b\\relax", "^2", "=", "c\\relax", "^2").set_color_by_tex("a\\relax", YELLOW).set_color_by_tex("b\\relax", YELLOW).set_color_by_tex("c\\relax", YELLOW).next_to(expression4, DOWN)
        for i in expression5:
            self.add(i)
            self.wait(0.25)
        self.wait(0.75)
        self.play(FadeOut(expression4), FadeOut(cr1), FadeOut(cr2), expression5.animate.next_to(group_full, DOWN))
        self.wait()
        self.play(Circumscribe(expression5))
        self.wait()

class Thumbnail(Scene):
    def construct(self):
        title = Tex("Pythagorean theorem: proof 1", color=YELLOW).to_edge(UP).scale(2)
        tri = Polygon([-1.5, -1.0, 0.0], [1.5, -1.0, 0.0], [1.5, 1.0, 0.0]).set_fill(color=GREEN, opacity=1.0).scale(2)
        tex = MathTex("a", "^2", "+", "b", "^2", "=", "c", "^2").set_color_by_tex("a", YELLOW).set_color_by_tex("b", YELLOW).set_color_by_tex("c", YELLOW).scale(2)
        group = VGroup(tri, tex).arrange(DOWN)
        wo = Tex("Without words").scale(2).to_edge(DOWN)
        self.add(title, *group, wo)